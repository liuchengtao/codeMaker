unit uDao;

interface
  uses SysUtils,Variants,System.Generics.Collections,FireDAC.Comp.Client,uBaseDM;
  const TABLE_NAME = 't_test';
        TABLE_COL = 'id,name,age,address,bz';
        TABLE_ADD_COL = 'name,age,address,bz';
  Type
   TDao = class
    private

    public
    function add(entity: TTest): Integer;  //新增 一条 id
    function updateById(entity: TTest): Integer;  //修改一条记录 By id
    function deleteById(id: Integer): Integer;   //删除一条记录 By id
    function getOneById(id: Integer): RTest;
    function findList(entity: TTest): TList<RTest>;
  end;
implementation
uses System.JSOn,System.JSON.Builders;
{ TDao }

function TDao.add(entity: TTest): Integer;
var sqlStr: String;
begin
  Result := -1;
  Try
    sqlStr := 'insert into %0:S(%1:S) Values ({SQL_ADD_VALUES});';
    sqlStr := Format(sqlStr,[TABLE_NAME,TABLE_ADD_COL,entity.name,entity.age,entity.bz,entity.address]);
    Result := BaseDM.ExecSQL(sqlStr);
  Except
    Result := -1;
  End;
end;

function TDao.deleteById(id: Integer): Integer;
var sqlStr: String;
begin
  Result := -1;
  Try
    sqlStr := 'update %0:S set del_flag = 0 where id = %1:D';
    sqlStr := Format(sqlStr,[TABLE_NAME,id]);
    Result := BaseDM.ExecSQL(sqlStr);
  Except
    Result := -1;
  End;
end;

function TDao.findList(entity: TTest): TList<RTest>;
var wc: TWhereClause;
   sqlStr,wcStr: String;
   qry: TFDQuery;
   test: RTest;
begin
    wc := TWhereClause.Create
          .add('id',entity.id)
          .add('name',entity.name)
          .add('age',entity.age)
          .add('bz',entity.bz)
          .add('address',entity.address);
    wcStr := wc.toStr;
    wc.Free;
    sqlStr := 'select ' + TABLE_COL + ' from ' + TABLE_NAME +' '+ wcStr;
    qry := BaseDM.OpenSQL(sqlStr);
    Result := TList<RTest>.Create;
    if qry.RecordCount <= 0 then exit;
    with qry do
    begin
      First;
      while not Eof do
      begin
        New(test);
        test.id := FieldByName('id').AsInteger;
        test.name := FieldByName('name').AsString;
        test.age := FieldByName('age').AsInteger;
        test.bz := FieldByName('bz').AsString;
        test.address := FieldByName('address').AsString;
        Result.Add(test);
        Next;
      end;
    end;
    qry.Free;
end;

function TDao.getOneById(id: Integer): RTest;
begin

end;

function TDao.updateById(entity: TTest): Integer;
begin

end;

//{ TWhereClause }
//
//function TWhereClause.add(wcName: String; wcValue: Variant): TWhereClause;
//begin
//   if not VarisNull(wcName) then
//     Self.addWc(wcName,wcValue);
//  Result := Self;
//end;
//
//procedure TWhereClause.addWc(wcName: String; wcValue: Variant);
//var s: String;
//begin
//  s := ' and %0:S = %1:S ';
//  s := Format(s,[wcName,wcValue]);
//  Self.wcStr := Self.wcStr + s ;
//end;
//
//function TWhereClause.toStr: String;
//begin
//  Result :=  Self.wcStr;
//end;

end.
